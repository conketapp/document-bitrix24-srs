#!/usr/bin/env python3
"""
Script export PlantUML sang ·∫£nh v√† ch√®n v√†o Markdown
"""

import os
import sys
import subprocess
import re
import tempfile
import shutil
from datetime import datetime

def generate_plantuml_image(plantuml_code, output_dir="diagrams/images", filename=None):
    """Generate ·∫£nh t·ª´ PlantUML code"""
    try:
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs(output_dir, exist_ok=True)
        
        # T·∫°o filename n·∫øu ch∆∞a c√≥
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"plantuml_{timestamp}"
        
        # T·∫°o file PlantUML t·∫°m th·ªùi
        temp_puml = os.path.join(tempfile.gettempdir(), f"{filename}.puml")
        with open(temp_puml, 'w', encoding='utf-8') as f:
            f.write(plantuml_code)
        
        # Generate PNG
        png_file = os.path.join(output_dir, f"{filename}.png")
        result = subprocess.run(['java', '-jar', 'plantuml.jar', temp_puml, '-o', output_dir], 
                              capture_output=True, text=True)
        
        # Cleanup temp file
        os.remove(temp_puml)
        
        if result.returncode == 0 or os.path.exists(png_file):
            print(f"‚úÖ ƒê√£ t·∫°o ·∫£nh: {png_file}")
            return png_file
        else:
            print(f"‚ö†Ô∏è C√≥ l·ªói khi generate, nh∆∞ng c√≥ th·ªÉ v·∫´n t·∫°o ƒë∆∞·ª£c file")
            return png_file if os.path.exists(png_file) else None
            
    except Exception as e:
        print(f"‚ùå L·ªói khi generate ·∫£nh: {e}")
        return None

def insert_image_to_md(md_file, image_path, caption=None, position="end"):
    """Ch√®n ·∫£nh v√†o file Markdown"""
    try:
        # ƒê·ªçc file Markdown
        with open(md_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # T·∫°o ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
        relative_path = os.path.relpath(image_path, os.path.dirname(md_file))
        
        # T·∫°o markdown image syntax
        if caption:
            image_md = f"\n![{caption}]({relative_path})\n\n*{caption}*\n"
        else:
            image_md = f"\n![PlantUML Diagram]({relative_path})\n"
        
        if position == "end":
            # Th√™m v√†o cu·ªëi file
            new_content = content + image_md
        elif position == "start":
            # Th√™m v√†o ƒë·∫ßu file
            new_content = image_md + content
        else:
            # Th√™m v√†o v·ªã tr√≠ c·ª• th·ªÉ
            lines = content.split('\n')
            try:
                pos = int(position)
                lines.insert(pos, image_md.strip())
                new_content = '\n'.join(lines)
            except ValueError:
                print(f"‚ùå V·ªã tr√≠ kh√¥ng h·ª£p l·ªá: {position}")
                return False
        
        # Ghi l·∫°i file
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ ƒê√£ ch√®n ·∫£nh v√†o: {md_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ch√®n ·∫£nh: {e}")
        return False

def create_md_with_plantuml(plantuml_code, md_file, caption=None, position="end"):
    """T·∫°o file Markdown v·ªõi PlantUML"""
    try:
        # Generate ·∫£nh
        image_path = generate_plantuml_image(plantuml_code)
        
        if not image_path:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh")
            return False
        
        # T·∫°o file Markdown n·∫øu ch∆∞a c√≥
        if not os.path.exists(md_file):
            with open(md_file, 'w', encoding='utf-8') as f:
                f.write(f"# PlantUML Diagram\n\n")
        
        # Ch√®n ·∫£nh v√†o Markdown
        return insert_image_to_md(md_file, image_path, caption, position)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def process_plantuml_file(puml_file, md_file, caption=None, position="end"):
    """X·ª≠ l√Ω file PlantUML v√† ch√®n v√†o Markdown"""
    try:
        # ƒê·ªçc file PlantUML
        with open(puml_file, 'r', encoding='utf-8') as f:
            plantuml_code = f.read()
        
        # T·∫°o caption t·ª´ t√™n file n·∫øu ch∆∞a c√≥
        if not caption:
            caption = os.path.splitext(os.path.basename(puml_file))[0].replace('-', ' ').title()
        
        return create_md_with_plantuml(plantuml_code, md_file, caption, position)
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file PlantUML: {e}")
        return False

def main():
    print("üåø PlantUML to Markdown - Export ·∫£nh v√† ch√®n v√†o MD")
    print("=" * 60)
    
    if len(sys.argv) < 3:
        print("üìù C√°ch s·ª≠ d·ª•ng:")
        print("python3 scripts/plantuml_to_md.py <plantuml_code> <md_file> [caption] [position]")
        print("python3 scripts/plantuml_to_md.py --file <puml_file> <md_file> [caption] [position]")
        print("\nüìÅ Files c√≥ s·∫µn:")
        
        # Li·ªát k√™ c√°c file .puml c√≥ s·∫µn
        puml_files = []
        for root, dirs, files in os.walk('diagrams'):
            for file in files:
                if file.endswith('.puml'):
                    puml_files.append(os.path.join(root, file))
        
        if puml_files:
            for i, file in enumerate(puml_files, 1):
                print(f"  {i}. {file}")
        else:
            print("  Kh√¥ng c√≥ file .puml n√†o")
        
        print("\nüí° V√≠ d·ª•:")
        print("  python3 scripts/plantuml_to_md.py '@startuml\nclass User\n@enduml' output.md 'User Class'")
        print("  python3 scripts/plantuml_to_md.py --file diagrams/test-plantuml.puml output.md 'Test Diagram'")
        print("\nüéØ V·ªã tr√≠ ch√®n:")
        print("  end    - Ch√®n v√†o cu·ªëi file (m·∫∑c ƒë·ªãnh)")
        print("  start  - Ch√®n v√†o ƒë·∫ßu file")
        print("  <s·ªë>   - Ch√®n v√†o d√≤ng s·ªë c·ª• th·ªÉ")
        return
    
    if sys.argv[1] == "--file":
        if len(sys.argv) < 4:
            print("‚ùå Thi·∫øu tham s·ªë")
            return
        
        puml_file = sys.argv[2]
        md_file = sys.argv[3]
        caption = sys.argv[4] if len(sys.argv) > 4 else None
        position = sys.argv[5] if len(sys.argv) > 5 else "end"
        
        success = process_plantuml_file(puml_file, md_file, caption, position)
    else:
        plantuml_code = sys.argv[1]
        md_file = sys.argv[2]
        caption = sys.argv[3] if len(sys.argv) > 3 else None
        position = sys.argv[4] if len(sys.argv) > 4 else "end"
        
        success = create_md_with_plantuml(plantuml_code, md_file, caption, position)
    
    if success:
        print(f"\n‚úÖ Ho√†n th√†nh! ƒê√£ t·∫°o ·∫£nh v√† ch√®n v√†o: {md_file}")
        print(f"üìÅ ·∫¢nh ƒë∆∞·ª£c l∆∞u trong: diagrams/images/")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra!")

if __name__ == "__main__":
    main()
