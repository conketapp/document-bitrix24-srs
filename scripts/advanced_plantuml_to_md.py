#!/usr/bin/env python3
"""
Script n√¢ng cao: Export PlantUML sang ·∫£nh v√† ch√®n v√†o Markdown
"""

import os
import sys
import subprocess
import re
import tempfile
import shutil
from datetime import datetime
import argparse

def generate_plantuml_image(plantuml_code, output_dir="diagrams/images", filename=None, format_type="png"):
    """Generate ·∫£nh t·ª´ PlantUML code v·ªõi nhi·ªÅu format"""
    try:
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs(output_dir, exist_ok=True)
        
        # T·∫°o filename n·∫øu ch∆∞a c√≥
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"plantuml_{timestamp}"
        
        # T·∫°o file PlantUML t·∫°m th·ªùi
        temp_puml = os.path.join(tempfile.gettempdir(), f"{filename}.puml")
        with open(temp_puml, 'w', encoding='utf-8') as f:
            f.write(plantuml_code)
        
        # Generate ·∫£nh v·ªõi format c·ª• th·ªÉ
        output_file = os.path.join(output_dir, f"{filename}.{format_type}")
        
        if format_type == "png":
            result = subprocess.run(['java', '-jar', 'plantuml.jar', temp_puml, '-o', output_dir], 
                                  capture_output=True, text=True)
        elif format_type == "svg":
            result = subprocess.run(['java', '-jar', 'plantuml.jar', '-tsvg', temp_puml, '-o', output_dir], 
                                  capture_output=True, text=True)
        elif format_type == "pdf":
            result = subprocess.run(['java', '-jar', 'plantuml.jar', '-tpdf', temp_puml, '-o', output_dir], 
                                  capture_output=True, text=True)
        else:
            print(f"‚ùå Format kh√¥ng h·ªó tr·ª£: {format_type}")
            return None
        
        # Cleanup temp file
        os.remove(temp_puml)
        
        if result.returncode == 0 or os.path.exists(output_file):
            print(f"‚úÖ ƒê√£ t·∫°o ·∫£nh: {output_file}")
            return output_file
        else:
            print(f"‚ö†Ô∏è C√≥ l·ªói khi generate, nh∆∞ng c√≥ th·ªÉ v·∫´n t·∫°o ƒë∆∞·ª£c file")
            return output_file if os.path.exists(output_file) else None
            
    except Exception as e:
        print(f"‚ùå L·ªói khi generate ·∫£nh: {e}")
        return None

def insert_image_to_md(md_file, image_path, caption=None, position="end", image_size=None):
    """Ch√®n ·∫£nh v√†o file Markdown v·ªõi t√πy ch·ªçn size"""
    try:
        # ƒê·ªçc file Markdown
        with open(md_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # T·∫°o ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
        relative_path = os.path.relpath(image_path, os.path.dirname(md_file))
        
        # T·∫°o markdown image syntax v·ªõi size n·∫øu c√≥
        if image_size:
            image_md = f"\n<img src=\"{relative_path}\" alt=\"{caption or 'PlantUML Diagram'}\" width=\"{image_size}\">\n\n"
        else:
            if caption:
                image_md = f"\n![{caption}]({relative_path})\n\n*{caption}*\n"
            else:
                image_md = f"\n![PlantUML Diagram]({relative_path})\n"
        
        if position == "end":
            # Th√™m v√†o cu·ªëi file
            new_content = content + image_md
        elif position == "start":
            # Th√™m v√†o ƒë·∫ßu file
            new_content = image_md + content
        else:
            # Th√™m v√†o v·ªã tr√≠ c·ª• th·ªÉ
            lines = content.split('\n')
            try:
                pos = int(position)
                lines.insert(pos, image_md.strip())
                new_content = '\n'.join(lines)
            except ValueError:
                print(f"‚ùå V·ªã tr√≠ kh√¥ng h·ª£p l·ªá: {position}")
                return False
        
        # Ghi l·∫°i file
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ ƒê√£ ch√®n ·∫£nh v√†o: {md_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ch√®n ·∫£nh: {e}")
        return False

def create_md_with_plantuml(plantuml_code, md_file, caption=None, position="end", format_type="png", image_size=None):
    """T·∫°o file Markdown v·ªõi PlantUML"""
    try:
        # Generate ·∫£nh
        image_path = generate_plantuml_image(plantuml_code, format_type=format_type)
        
        if not image_path:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh")
            return False
        
        # T·∫°o file Markdown n·∫øu ch∆∞a c√≥
        if not os.path.exists(md_file):
            with open(md_file, 'w', encoding='utf-8') as f:
                f.write(f"# PlantUML Diagram\n\n")
        
        # Ch√®n ·∫£nh v√†o Markdown
        return insert_image_to_md(md_file, image_path, caption, position, image_size)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def process_plantuml_file(puml_file, md_file, caption=None, position="end", format_type="png", image_size=None):
    """X·ª≠ l√Ω file PlantUML v√† ch√®n v√†o Markdown"""
    try:
        # ƒê·ªçc file PlantUML
        with open(puml_file, 'r', encoding='utf-8') as f:
            plantuml_code = f.read()
        
        # T·∫°o caption t·ª´ t√™n file n·∫øu ch∆∞a c√≥
        if not caption:
            caption = os.path.splitext(os.path.basename(puml_file))[0].replace('-', ' ').title()
        
        return create_md_with_plantuml(plantuml_code, md_file, caption, position, format_type, image_size)
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file PlantUML: {e}")
        return False

def batch_process_plantuml_files(input_dir, output_dir, format_type="png"):
    """X·ª≠ l√Ω h√†ng lo·∫°t c√°c file PlantUML"""
    try:
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs(output_dir, exist_ok=True)
        
        # T√¨m t·∫•t c·∫£ file .puml
        puml_files = []
        for root, dirs, files in os.walk(input_dir):
            for file in files:
                if file.endswith('.puml'):
                    puml_files.append(os.path.join(root, file))
        
        if not puml_files:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file .puml trong: {input_dir}")
            return False
        
        print(f"üîç T√¨m th·∫•y {len(puml_files)} file PlantUML")
        
        success_count = 0
        for puml_file in puml_files:
            # T·∫°o t√™n file output
            base_name = os.path.splitext(os.path.basename(puml_file))[0]
            md_file = os.path.join(output_dir, f"{base_name}.md")
            
            print(f"\nüìù ƒêang x·ª≠ l√Ω: {puml_file}")
            
            if process_plantuml_file(puml_file, md_file, format_type=format_type):
                success_count += 1
                print(f"‚úÖ ƒê√£ t·∫°o: {md_file}")
            else:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω: {puml_file}")
        
        print(f"\nüéâ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {success_count}/{len(puml_files)} file")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói batch process: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Export PlantUML sang ·∫£nh v√† ch√®n v√†o Markdown')
    parser.add_argument('--file', help='File PlantUML (.puml)')
    parser.add_argument('--code', help='PlantUML code tr·ª±c ti·∫øp')
    parser.add_argument('--output', required=True, help='File Markdown output')
    parser.add_argument('--caption', help='Caption cho ·∫£nh')
    parser.add_argument('--position', default='end', help='V·ªã tr√≠ ch√®n (end/start/s·ªë)')
    parser.add_argument('--format', default='png', choices=['png', 'svg', 'pdf'], help='Format ·∫£nh')
    parser.add_argument('--size', help='K√≠ch th∆∞·ªõc ·∫£nh (px)')
    parser.add_argument('--batch', help='Th∆∞ m·ª•c ch·ª©a file PlantUML ƒë·ªÉ x·ª≠ l√Ω h√†ng lo·∫°t')
    parser.add_argument('--batch-output', help='Th∆∞ m·ª•c output cho batch process')
    
    args = parser.parse_args()
    
    print("üåø Advanced PlantUML to Markdown")
    print("=" * 50)
    
    if args.batch:
        # Batch process
        if not args.batch_output:
            print("‚ùå C·∫ßn --batch-output cho batch process")
            return
        
        success = batch_process_plantuml_files(args.batch, args.batch_output, args.format)
    elif args.file:
        # Process t·ª´ file
        success = process_plantuml_file(args.file, args.output, args.caption, args.position, args.format, args.size)
    elif args.code:
        # Process t·ª´ code
        success = create_md_with_plantuml(args.code, args.output, args.caption, args.position, args.format, args.size)
    else:
        print("‚ùå C·∫ßn --file, --code ho·∫∑c --batch")
        print("\nüí° V√≠ d·ª•:")
        print("  python3 scripts/advanced_plantuml_to_md.py --file diagrams/test.puml --output output.md")
        print("  python3 scripts/advanced_plantuml_to_md.py --code '@startuml\nclass User\n@enduml' --output output.md")
        print("  python3 scripts/advanced_plantuml_to_md.py --batch diagrams --batch-output docs")
        return
    
    if success:
        print(f"\n‚úÖ Ho√†n th√†nh!")
        if not args.batch:
            print(f"üìÅ File: {args.output}")
        print(f"üìÅ ·∫¢nh ƒë∆∞·ª£c l∆∞u trong: diagrams/images/")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra!")

if __name__ == "__main__":
    main()
